Testing Bug 1.
Testing with choice1: 4  choice2: 5
pre.hand[currentPlayer][choice1]: 4
pre.supplyCount1 39
pre.supplyCount2 40
pre.handCount 5
Pre:choice1 found < 5 > times in players hand 
Pre:choice2 found < 0 > times in players hand 
post.supplyCount1 39
post.supplyCount2 40
post.handCount 5
Post:choice1 found < 5 > times in players hand 
Post:choice2 found < 0 > times in players hand 
Card Trashed Check: Fail: 39 != 40 
Testing with choice1: 5  choice2: 6
pre.hand[currentPlayer][choice1]: 0
pre.supplyCount1 40
pre.supplyCount2 30
pre.handCount 5
Pre:choice1 found < 0 > times in players hand 
Pre:choice2 found < 0 > times in players hand 
post.supplyCount1 40
post.supplyCount2 30
post.handCount 5
Post:choice1 found < 0 > times in players hand 
Post:choice2 found < 0 > times in players hand 
Test completed!

Testing Bug 2.
Testing with choice1: 4  choice2: 4
Testing Cost Values: PASS
Testing with choice1: 4  choice2: 6
Testing Cost Values: PASS
Testing with choice1: 5  choice2: 5
Test completed!

Testing Bug3.
Testing with choice1: 13  choice2: 17
Testing for Added card: Fail: 0 != 1 
Testing with choice1: 13  choice2: 2
Testing for Added card: Fail: 0 != 1 
Testing with choice1: 20  choice2: 15
Testing for Added card: Fail: 0 != 1 
Test Completed!

Testing Bug4 isGameOver().
Last 3 supply piles set to 0, testing isGameOver()
isGameOver expected outcome: 1 || Actual outcome: 1
2/3 of the Last 3 supply piles set to 0,testing isGameOver()
isGameOver expected outcome: 1 || Actual outcome: 1
1/3 of the Last 3 supply piles set to 0,testing isGameOver()
isGameOver expected outcome: 1 || Actual outcome: 1
Test Completed!

Testing Bug5 scoreFor().
Expected score for player 0: 11 || Actual score: 11
Test Completed!

Testing Bug6. cardEffect() for feast
Setting coins to 1, calling cardEffect() for feast
Coins after feast expected value 1 || actual coins = 1
Test Completed!

---
Begin Testing Bug #7:
Tribute, Player 2 deck = {copper, copper, silver}, Assert +4 coins; +0 actions and cards:
Passed.

Tribute, Player 2 deck = {mine, baron, remodel}, Assert +4 actions; +0 coins and cards:
Passed.

Tribute, Player 2 deck = {estate, estate, duchy}, Assert +4 cards; +0 coins and actions:
Failed. (coins: 0 (0), numActions: 1 (1), deckCount[player]: 0 (4))

Test Completed!

---
Begin Testing Bug #8:
Embargo, Assert bonus coins return 2, gameState->coins unchanged:
Passed.

Baron, Assert bonus coins return 4, gameState->coins unchanged:
Failed. (bonus: 0 (4), G.coins: 4 (0))

Minion, Assert bonus coins return 2, gameState->coins unchanged:
Passed.

Steward, Assert bonus coins return 2, gameState->coins unchanged:
Passed.

Salvager, Assert bonus coins return 2, gameState->coins unchanged:
Passed.

Tribute, Assert bonus coins return 2, gameState->coins unchanged:
Passed.

Test Completed!

---
Begin Testing Bug #9:
---
For curses in player 2's deck, Assert +0 actions, cards, and coins:
Failed. (coins: 2 (0), numActions: 1 (1), deckCount[player]: 0 (0))

For duplicate treasures in player 2's deck, Assert +2 coins; +0 cards and actions:
Passed.

For duplicate actions in player 2's deck, Assert +2 actions; +0 cards and coins:
Failed. (coins: 2 (0), numActions: 1 (3), deckCount[player]: 0 (0))

For duplicate victories in player 2's deck, Assert +2 cards; +0 coins and actions:
Failed. (coins: 2 (0), numActions: 1 (1), deckCount[player]: 0 (2))

For unique actions in player 2's deck, Assert +4 actions; +0 cards and coins:
Failed. (coins: 2 (0), numActions: 1 (5), deckCount[player]: 0 (0))

Test Completed!

---
Begin Testing Bug #10:
Ambassador, Assert return value not -1, for 2 discards:
Passed.

Ambassador, Assert return value not -1, for 1 discard:
Passed.

Test Completed!

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:92.86% of 14
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'cardEffect'
Lines executed:49.18% of 244
Branches executed:63.64% of 209
Taken at least once:42.58% of 209
Calls executed:38.71% of 62

Function 'getCost'
Lines executed:36.67% of 30
Branches executed:100.00% of 28
Taken at least once:32.14% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:64.29% of 42
Branches executed:100.00% of 42
Taken at least once:57.14% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:80.00% of 10
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:93.55% of 62
Branches executed:100.00% of 46
Taken at least once:89.13% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'myAssert'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

File 'dominion.c'
Lines executed:53.01% of 581
Branches executed:69.23% of 429
Taken at least once:47.09% of 429
Calls executed:40.00% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function myAssert called 6 returned 100% blocks executed 100%
        6:    8:int myAssert(int a, int b) {
        6:    9:	if (a == b) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:   10:		printf("PASS\n");
call    0 returned 100%
        2:   11:		return 1;
        -:   12:	}
        -:   13:	else {
        4:   14:		printf("Fail: %d != %d \n", a, b);
call    0 returned 100%
        4:   15:		return -1;
        -:   16:	}
        -:   17:	return 0;
        -:   18:}
        -:   19:
function compare called 750 returned 100% blocks executed 83%
      750:   20:int compare(const void* a, const void* b) {
      750:   21:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   22:        return 1;
      750:   23:    if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      200:   24:        return -1;
      550:   25:    return 0;
        -:   26:}
        -:   27:
function newGame called 0 returned 0% blocks executed 0%
    #####:   28:struct gameState* newGame() {
    #####:   29:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   30:    return g;
        -:   31:}
        -:   32:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   33:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   34:                  int k8, int k9, int k10) {
    #####:   35:    int* k = malloc(10 * sizeof(int));
    #####:   36:    k[0] = k1;
    #####:   37:    k[1] = k2;
    #####:   38:    k[2] = k3;
    #####:   39:    k[3] = k4;
    #####:   40:    k[4] = k5;
    #####:   41:    k[5] = k6;
    #####:   42:    k[6] = k7;
    #####:   43:    k[7] = k8;
    #####:   44:    k[8] = k9;
    #####:   45:    k[9] = k10;
    #####:   46:    return k;
        -:   47:}
        -:   48:
function initializeGame called 22 returned 100% blocks executed 94%
       22:   49:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   50:                   struct gameState *state) {
        -:   51:    int i;
        -:   52:    int j;
        -:   53:    int it;
        -:   54:
        -:   55:    //set up random number generator
       22:   56:    SelectStream(1);
call    0 returned 100%
       22:   57:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   58:
        -:   59:    //check number of players
       22:   60:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   61:    {
    #####:   62:        return -1;
        -:   63:    }
        -:   64:
        -:   65:    //set number of players
       22:   66:    state->numPlayers = numPlayers;
        -:   67:
        -:   68:    //check selected kingdom cards are different
      242:   69:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   70:    {
     2420:   71:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   72:        {
     2200:   73:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   74:            {
    #####:   75:                return -1;
        -:   76:            }
        -:   77:        }
        -:   78:    }
        -:   79:
        -:   80:
        -:   81:    //initialize supply
        -:   82:    ///////////////////////////////
        -:   83:    //set number of Curse cards
       22:   84:    if (numPlayers == 2)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -:   85:    {
       16:   86:        state->supplyCount[curse] = 10;
        -:   87:    }
        6:   88:    else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   89:    {
        6:   90:        state->supplyCount[curse] = 20;
        -:   91:    }
        -:   92:    else
        -:   93:    {
    #####:   94:        state->supplyCount[curse] = 30;
        -:   95:    }
        -:   96:
        -:   97:    //set number of Victory cards
       22:   98:    if (numPlayers == 2)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -:   99:    {
       16:  100:        state->supplyCount[estate] = 8;
       16:  101:        state->supplyCount[duchy] = 8;
       16:  102:        state->supplyCount[province] = 8;
        -:  103:    }
        -:  104:    else
        -:  105:    {
        6:  106:        state->supplyCount[estate] = 12;
        6:  107:        state->supplyCount[duchy] = 12;
        6:  108:        state->supplyCount[province] = 12;
        -:  109:    }
        -:  110:
        -:  111:    //set number of Treasure cards
       22:  112:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       22:  113:    state->supplyCount[silver] = 40;
       22:  114:    state->supplyCount[gold] = 30;
        -:  115:
        -:  116:    //set number of Kingdom cards
      462:  117:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  118:    {
     3630:  119:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  120:        {
     3410:  121:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  122:            {
        -:  123:                //check if card is a 'Victory' Kingdom card
      220:  124:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  125:                {
       52:  126:                    if (numPlayers == 2) {
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
       17:  127:                        state->supplyCount[i] = 8;
        -:  128:                    }
        -:  129:                    else {
        9:  130:                        state->supplyCount[i] = 12;
        -:  131:                    }
        -:  132:                }
        -:  133:                else
        -:  134:                {
      194:  135:                    state->supplyCount[i] = 10;
        -:  136:                }
      220:  137:                break;
        -:  138:            }
        -:  139:            else    //card is not in the set choosen for the game
        -:  140:            {
     3190:  141:                state->supplyCount[i] = -1;
        -:  142:            }
        -:  143:        }
        -:  144:
        -:  145:    }
        -:  146:
        -:  147:    ////////////////////////
        -:  148:    //supply intilization complete
        -:  149:
        -:  150:    //set player decks
       72:  151:    for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  152:    {
       50:  153:        state->deckCount[i] = 0;
      200:  154:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:        {
      150:  156:            state->deck[i][j] = estate;
      150:  157:            state->deckCount[i]++;
        -:  158:        }
      400:  159:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  160:        {
      350:  161:            state->deck[i][j] = copper;
      350:  162:            state->deckCount[i]++;
        -:  163:        }
        -:  164:    }
        -:  165:
        -:  166:    //shuffle player decks
       72:  167:    for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  168:    {
       50:  169:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  170:        {
    #####:  171:            return -1;
        -:  172:        }
        -:  173:    }
        -:  174:
        -:  175:    //draw player hands
       72:  176:    for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  177:    {
        -:  178:        //initialize hand size to zero
       50:  179:        state->handCount[i] = 0;
       50:  180:        state->discardCount[i] = 0;
        -:  181:        //draw 5 cards
        -:  182:        // for (j = 0; j < 5; j++)
        -:  183:        //	{
        -:  184:        //	  drawCard(i, state);
        -:  185:        //	}
        -:  186:    }
        -:  187:
        -:  188:    //set embargo tokens to 0 for all supply piles
      616:  189:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  190:    {
      594:  191:        state->embargoTokens[i] = 0;
        -:  192:    }
        -:  193:
        -:  194:    //initialize first player's turn
       22:  195:    state->outpostPlayed = 0;
       22:  196:    state->phase = 0;
       22:  197:    state->numActions = 1;
       22:  198:    state->numBuys = 1;
       22:  199:    state->playedCardCount = 0;
       22:  200:    state->whoseTurn = 0;
       22:  201:    state->handCount[state->whoseTurn] = 0;
        -:  202:    //int it; move to top
        -:  203:
        -:  204:    //Moved draw cards to here, only drawing at the start of a turn
      132:  205:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      110:  206:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  207:    }
        -:  208:
       22:  209:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  210:
       22:  211:    return 0;
        -:  212:}
        -:  213:
function shuffle called 64 returned 100% blocks executed 100%
       64:  214:int shuffle(int player, struct gameState *state) {
        -:  215:
        -:  216:
        -:  217:    int newDeck[MAX_DECK];
       64:  218:    int newDeckPos = 0;
        -:  219:    int card;
        -:  220:    int i;
        -:  221:
       64:  222:    if (state->deckCount[player] < 1)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
       14:  223:        return -1;
       50:  224:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  225:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  226:
      600:  227:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      500:  228:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      500:  229:        newDeck[newDeckPos] = state->deck[player][card];
      500:  230:        newDeckPos++;
     1671:  231:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
     1171:  232:            state->deck[player][i] = state->deck[player][i+1];
        -:  233:        }
      500:  234:        state->deckCount[player]--;
        -:  235:    }
      550:  236:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      500:  237:        state->deck[player][i] = newDeck[i];
      500:  238:        state->deckCount[player]++;
        -:  239:    }
        -:  240:
       50:  241:    return 0;
        -:  242:}
        -:  243:
function playCard called 0 returned 0% blocks executed 0%
    #####:  244:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  245:{
        -:  246:    int card;
    #####:  247:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  248:
        -:  249:    //check if it is the right phase
    #####:  250:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:        return -1;
        -:  253:    }
        -:  254:
        -:  255:    //check if player has enough actions
    #####:  256:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  257:    {
    #####:  258:        return -1;
        -:  259:    }
        -:  260:
        -:  261:    //get card played
    #####:  262:    card = handCard(handPos, state);
call    0 never executed
        -:  263:
        -:  264:    //check if selected card is an action
    #####:  265:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  266:    {
    #####:  267:        return -1;
        -:  268:    }
        -:  269:
        -:  270:    //play card
    #####:  271:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  272:    {
    #####:  273:        return -1;
        -:  274:    }
        -:  275:
        -:  276:    //reduce number of actions
    #####:  277:    state->numActions--;
        -:  278:
        -:  279:    //update coins (Treasure cards may be added with card draws)
    #####:  280:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  281:
    #####:  282:    return 0;
        -:  283:}
        -:  284:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:    int who;
        -:  287:    if (DEBUG) {
        -:  288:        printf("Entering buyCard...\n");
        -:  289:    }
        -:  290:
        -:  291:    // I don't know what to do about the phase thing.
        -:  292:
    #####:  293:    who = state->whoseTurn;
        -:  294:
    #####:  295:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  296:        if (DEBUG)
        -:  297:            printf("You do not have any buys left\n");
    #####:  298:        return -1;
    #####:  299:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  300:        if (DEBUG)
        -:  301:            printf("There are not any of that type of card left\n");
    #####:  302:        return -1;
    #####:  303:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  304:        if (DEBUG)
        -:  305:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  306:        return -1;
        -:  307:    } else {
    #####:  308:        state->phase=1;
        -:  309:        //state->supplyCount[supplyPos]--;
    #####:  310:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  311:
    #####:  312:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  313:        state->numBuys--;
        -:  314:        if (DEBUG)
        -:  315:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:    }
        -:  317:
        -:  318:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:    //state->discardCount[who]++;
        -:  320:
    #####:  321:    return 0;
        -:  322:}
        -:  323:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  324:int numHandCards(struct gameState *state) {
    #####:  325:    return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  326:}
        -:  327:
function handCard called 1 returned 100% blocks executed 100%
        1:  328:int handCard(int handPos, struct gameState *state) {
        1:  329:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  330:    return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
function supplyCount called 8 returned 100% blocks executed 100%
        8:  333:int supplyCount(int card, struct gameState *state) {
        8:  334:    return state->supplyCount[card];
        -:  335:}
        -:  336:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:    int i;
    #####:  339:    int count = 0;
        -:  340:
    #####:  341:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  344:    }
        -:  345:
    #####:  346:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  347:    {
    #####:  348:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  349:    }
        -:  350:
    #####:  351:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:    {
    #####:  353:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  354:    }
        -:  355:
    #####:  356:    return count;
        -:  357:}
        -:  358:
function whoseTurn called 30 returned 100% blocks executed 100%
       30:  359:int whoseTurn(struct gameState *state) {
       30:  360:    return state->whoseTurn;
        -:  361:}
        -:  362:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  363:int endTurn(struct gameState *state) {
        -:  364:    int k;
        -:  365:    int i;
    #####:  366:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  367:
        -:  368:    //Discard hand
    #####:  369:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  370:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  372:    }
    #####:  373:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:
        -:  375:    //Code for determining the player
    #####:  376:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  377:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  378:    }
        -:  379:    else {
    #####:  380:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:    }
        -:  382:
    #####:  383:    state->outpostPlayed = 0;
    #####:  384:    state->phase = 0;
    #####:  385:    state->numActions = 1;
    #####:  386:    state->coins = 0;
    #####:  387:    state->numBuys = 1;
    #####:  388:    state->playedCardCount = 0;
    #####:  389:    state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:    //int k; move to top
        -:  392:    //Next player draws hand
    #####:  393:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  394:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  395:    }
        -:  396:
        -:  397:    //Update money
    #####:  398:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  399:
    #####:  400:    return 0;
        -:  401:}
        -:  402:
function isGameOver called 2 returned 100% blocks executed 82%
        2:  403:int isGameOver(struct gameState *state) {
        -:  404:    int i;
        -:  405:    int j;
        -:  406:
        -:  407:    //if stack of Province cards is empty, the game ends
        2:  408:    if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  409:    {
    #####:  410:        return 1;
        -:  411:    }
        -:  412:
        -:  413:    //if three supply pile are at 0, the game ends
        2:  414:    j = 0;
       56:  415:    for (i = 0; i < 27; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  416:    {
       54:  417:        if (state->supplyCount[i] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  418:        {
        6:  419:            j++;
        -:  420:        }
        -:  421:    }
        2:  422:    if ( j >= 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  423:    {
        2:  424:        return 1;
        -:  425:    }
        -:  426:
    #####:  427:    return 0;
        -:  428:}
        -:  429:
function scoreFor called 1 returned 100% blocks executed 64%
        1:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:    int i;
        1:  433:    int score = 0;
        -:  434:    //score from hand
        4:  435:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  436:    {
        3:  437:        if (state->hand[player][i] == curse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  438:            score = score - 1;
        -:  439:        };
        3:  440:        if (state->hand[player][i] == estate) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  441:            score = score + 1;
        -:  442:        };
        3:  443:        if (state->hand[player][i] == duchy) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  444:            score = score + 3;
        -:  445:        };
        3:  446:        if (state->hand[player][i] == province) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  447:            score = score + 6;
        -:  448:        };
        3:  449:        if (state->hand[player][i] == great_hall) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  450:            score = score + 1;
        -:  451:        };
        3:  452:        if (state->hand[player][i] == gardens) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  453:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  454:        };
        -:  455:    }
        -:  456:
        -:  457:    //score from discard
        4:  458:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  459:    {
        3:  460:        if (state->discard[player][i] == curse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  461:            score = score - 1;
        -:  462:        };
        3:  463:        if (state->discard[player][i] == estate) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  464:            score = score + 1;
        -:  465:        };
        3:  466:        if (state->discard[player][i] == duchy) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  467:            score = score + 3;
        -:  468:        };
        3:  469:        if (state->discard[player][i] == province) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  470:            score = score + 6;
        -:  471:        };
        3:  472:        if (state->discard[player][i] == great_hall) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  473:            score = score + 1;
        -:  474:        };
        3:  475:        if (state->discard[player][i] == gardens) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  476:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  477:        };
        -:  478:    }
        -:  479:
        -:  480:    //score from deck
        6:  481:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  482:    {
        5:  483:        if (state->deck[player][i] == curse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  484:            score = score - 1;
        -:  485:        };
        5:  486:        if (state->deck[player][i] == estate) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  487:            score = score + 1;
        -:  488:        };
        5:  489:        if (state->deck[player][i] == duchy) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  490:            score = score + 3;
        -:  491:        };
        5:  492:        if (state->deck[player][i] == province) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  493:            score = score + 6;
        -:  494:        };
        5:  495:        if (state->deck[player][i] == great_hall) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  496:            score = score + 1;
        -:  497:        };
        5:  498:        if (state->deck[player][i] == gardens) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  499:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  500:        };
        -:  501:    }
        -:  502:
        1:  503:    return score;
        -:  504:}
        -:  505:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  506:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  507:    int i;
        -:  508:    int j;
        -:  509:    int highScore;
        -:  510:    int currentPlayer;
        -:  511:
        -:  512:    //get score for each player
    #####:  513:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:    {
        -:  515:        //set unused player scores to -9999
    #####:  516:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  517:        {
    #####:  518:            players[i] = -9999;
        -:  519:        }
        -:  520:        else
        -:  521:        {
    #####:  522:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  523:        }
        -:  524:    }
        -:  525:
        -:  526:    //find highest score
    #####:  527:    j = 0;
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  531:        {
    #####:  532:            j = i;
        -:  533:        }
        -:  534:    }
    #####:  535:    highScore = players[j];
        -:  536:
        -:  537:    //add 1 to players who had less turns
    #####:  538:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  539:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  540:    {
    #####:  541:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  542:        {
    #####:  543:            players[i]++;
        -:  544:        }
        -:  545:    }
        -:  546:
        -:  547:    //find new highest score
    #####:  548:    j = 0;
    #####:  549:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  550:    {
    #####:  551:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  552:        {
    #####:  553:            j = i;
        -:  554:        }
        -:  555:    }
    #####:  556:    highScore = players[j];
        -:  557:
        -:  558:    //set winners in array to 1 and rest to 0
    #####:  559:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  560:    {
    #####:  561:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  562:        {
    #####:  563:            players[i] = 1;
        -:  564:        }
        -:  565:        else
        -:  566:        {
    #####:  567:            players[i] = 0;
        -:  568:        }
        -:  569:    }
        -:  570:
    #####:  571:    return 0;
        -:  572:}
        -:  573:
function drawCard called 124 returned 100% blocks executed 85%
      124:  574:int drawCard(int player, struct gameState *state)
        -:  575:{   int count;
        -:  576:    int deckCounter;
      124:  577:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  578:
        -:  579:        //Step 1 Shuffle the discard pile back into a deck
        -:  580:        int i;
        -:  581:        //Move discard to deck
       14:  582:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  583:            state->deck[player][i] = state->discard[player][i];
    #####:  584:            state->discard[player][i] = -1;
        -:  585:        }
        -:  586:
       14:  587:        state->deckCount[player] = state->discardCount[player];
       14:  588:        state->discardCount[player] = 0;//Reset discard
        -:  589:
        -:  590:        //Shufffle the deck
       14:  591:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  592:
        -:  593:        if (DEBUG) { //Debug statements
        -:  594:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  595:        }
        -:  596:
       14:  597:        state->discardCount[player] = 0;
        -:  598:
        -:  599:        //Step 2 Draw Card
       14:  600:        count = state->handCount[player];//Get current player's hand count
        -:  601:
        -:  602:        if (DEBUG) { //Debug statements
        -:  603:            printf("Current hand count: %d\n", count);
        -:  604:        }
        -:  605:
       14:  606:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  607:
       14:  608:        if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       14:  609:            return -1;
        -:  610:
    #####:  611:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  612:        state->deckCount[player]--;
    #####:  613:        state->handCount[player]++;//Increment hand count
        -:  614:    }
        -:  615:
        -:  616:    else {
      110:  617:        int count = state->handCount[player];//Get current hand count for player
        -:  618:        int deckCounter;
        -:  619:        if (DEBUG) { //Debug statements
        -:  620:            printf("Current hand count: %d\n", count);
        -:  621:        }
        -:  622:
      110:  623:        deckCounter = state->deckCount[player];//Create holder for the deck count
      110:  624:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      110:  625:        state->deckCount[player]--;
      110:  626:        state->handCount[player]++;//Increment hand count
        -:  627:    }
        -:  628:
      110:  629:    return 0;
        -:  630:}
        -:  631:
function getCost called 12 returned 100% blocks executed 37%
       12:  632:int getCost(int cardNumber)
        -:  633:{
       12:  634:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 8%
branch  2 taken 8%
branch  3 taken 0%
branch  4 taken 17%
branch  5 taken 8%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 17%
branch 14 taken 0%
branch 15 taken 8%
branch 16 taken 0%
branch 17 taken 8%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 8%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  635:    {
        -:  636:    case curse:
    #####:  637:        return 0;
        -:  638:    case estate:
        1:  639:        return 2;
        -:  640:    case duchy:
        1:  641:        return 5;
        -:  642:    case province:
    #####:  643:        return 8;
        -:  644:    case copper:
        2:  645:        return 0;
        -:  646:    case silver:
        1:  647:        return 3;
        -:  648:    case gold:
        2:  649:        return 6;
        -:  650:    case adventurer:
    #####:  651:        return 6;
        -:  652:    case council_room:
    #####:  653:        return 5;
        -:  654:    case feast:
    #####:  655:        return 4;
        -:  656:    case gardens:
    #####:  657:        return 4;
        -:  658:    case mine:
    #####:  659:        return 5;
        -:  660:    case remodel:
    #####:  661:        return 4;
        -:  662:    case smithy:
        2:  663:        return 4;
        -:  664:    case village:
    #####:  665:        return 3;
        -:  666:    case baron:
        1:  667:        return 4;
        -:  668:    case great_hall:
    #####:  669:        return 3;
        -:  670:    case minion:
        1:  671:        return 5;
        -:  672:    case steward:
    #####:  673:        return 3;
        -:  674:    case tribute:
    #####:  675:        return 5;
        -:  676:    case ambassador:
        1:  677:        return 3;
        -:  678:    case cutpurse:
    #####:  679:        return 4;
        -:  680:    case embargo:
    #####:  681:        return 2;
        -:  682:    case outpost:
    #####:  683:        return 5;
        -:  684:    case salvager:
    #####:  685:        return 4;
        -:  686:    case sea_hag:
    #####:  687:        return 4;
        -:  688:    case treasure_map:
    #####:  689:        return 4;
        -:  690:    }
        -:  691:
    #####:  692:    return -1;
        -:  693:}
        -:  694:
function cardEffect called 25 returned 100% blocks executed 48%
       25:  695:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  696:{
        -:  697:    int i; int j; int k; int x;
        -:  698:    int index;
       25:  699:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
       25:  700:    int nextPlayer = currentPlayer + 1;
        -:  701:
       25:  702:    int tributeRevealedCards[2] = {-1, -1};
        -:  703:    int temphand[MAX_HAND];// moved above the if statement
       25:  704:    int drawntreasure=0;
        -:  705:    int cardDrawn;
       25:  706:    int z = 0;// this is the counter for the temp hand
       25:  707:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  708:        nextPlayer = 0;
        -:  709:    }
        -:  710:
        -:  711:
        -:  712:    //uses switch to select card and perform actions
       25:  713:    switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 4%
branch  3 taken 0%
branch  4 taken 20%
branch  5 taken 12%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 4%
branch  9 taken 0%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 36%
branch 13 taken 8%
branch 14 taken 0%
branch 15 taken 4%
branch 16 taken 0%
branch 17 taken 4%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  714:    {
        -:  715:    case adventurer:
    #####:  716:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  717:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  718:                shuffle(currentPlayer, state);
call    0 never executed
        -:  719:            }
    #####:  720:            drawCard(currentPlayer, state);
call    0 never executed
    #####:  721:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  722:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  723:                drawntreasure++;
        -:  724:            else {
    #####:  725:                temphand[z]=cardDrawn;
    #####:  726:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  727:                z++;
        -:  728:            }
        -:  729:        }
    #####:  730:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  731:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  732:            z=z-1;
        -:  733:        }
    #####:  734:        return 0;
        -:  735:
        -:  736:    case council_room:
        -:  737:        //+4 Cards
    #####:  738:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  739:        {
    #####:  740:            drawCard(currentPlayer, state);
call    0 never executed
        -:  741:        }
        -:  742:
        -:  743:        //+1 Buy
    #####:  744:        state->numBuys++;
        -:  745:
        -:  746:        //Each other player draws a card
    #####:  747:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  748:        {
    #####:  749:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  750:            {
    #####:  751:                drawCard(i, state);
call    0 never executed
        -:  752:            }
        -:  753:        }
        -:  754:
        -:  755:        //put played card in played card pile
    #####:  756:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  757:
    #####:  758:        return 0;
        -:  759:
        -:  760:    case feast:
        -:  761:        //gain card with cost up to 5
        -:  762:        //Backup hand
        7:  763:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:  764:            temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  765:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  766:        }
        -:  767:        //Backup hand
        1:  768:		int tempCoins = state->coins;
        -:  769:        //Update Coins for Buy
        1:  770:        updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        1:  771:        x = 1;//Condition to loop on
        3:  772:        while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  773:            if (supplyCount(choice1, state) <= 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  774:                if (DEBUG)
        -:  775:                    printf("None of that card left, sorry!\n");
        -:  776:
        -:  777:                if (DEBUG) {
        -:  778:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  779:                }
        -:  780:            }
        1:  781:            else if (state->coins < getCost(choice1)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  782:                printf("That card is too expensive!\n");
call    0 never executed
        -:  783:
        -:  784:                if (DEBUG) {
        -:  785:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  786:                }
        -:  787:            }
        -:  788:            else {
        -:  789:
        -:  790:                if (DEBUG) {
        -:  791:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  792:                }
        -:  793:
        1:  794:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        1:  795:				state->coins = tempCoins;
        1:  796:                x = 0;//No more buying cards
        -:  797:
        -:  798:                if (DEBUG) {
        -:  799:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  800:                }
        -:  801:
        -:  802:            }
        -:  803:        }
        -:  804:
        -:  805:        //Reset Hand
        7:  806:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:  807:            state->hand[currentPlayer][i] = temphand[i];
        6:  808:            temphand[i] = -1;
        -:  809:        }
        -:  810:        //Reset Hand
        -:  811:
        1:  812:        return 0;
        -:  813:
        -:  814:    case gardens:
    #####:  815:        return -1;
        -:  816:
        -:  817:    case mine:
        5:  818:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  819:
        -:  820:		//must be a treasure card chosen to trash
        5:  821:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  822:        {
        1:  823:            return -1;
        -:  824:        }
        -:  825:		//checks if trade card is a valid card: here poss bug as choice2 must also be treasure
        4:  826:        else if (choice2 < copper || choice2 > gold)//changed to only Treasure cards
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  827:        {
    #####:  828:            return -1;
        -:  829:        }
        -:  830:		//changed here to fix bug
        4:  831:		else if (j == copper)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  832:		{
        2:  833:			if (choice2 == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  834:				return -1;
        -:  835:			}
        -:  836:
        -:  837:        }
        2:  838:		else if (j == gold) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  839:			if (choice2 == copper) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  840:				return -1;
        -:  841:			}
        -:  842:		}
        -:  843:		else {
        -:  844:			// toFlag = 0 : add to discard
        -:  845:			// toFlag = 1 : add to deck
        -:  846:			// toFlag = 2 : add to hand
        1:  847:			gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  848:
        -:  849:			//discard card from hand
        1:  850:			discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  851:
        -:  852:			//discard trashed card
        4:  853:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  854:			{
        4:  855:				if (state->hand[currentPlayer][i] == j)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  856:				{
        1:  857:					discardCard(i, currentPlayer, state, 1);//added 1 trash flag
call    0 returned 100%
        1:  858:					break;
        -:  859:				}
        -:  860:			}
        -:  861:		}
        4:  862:        return 0;
        -:  863:
        -:  864:    case remodel:
        3:  865:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  866:		//bug 3 here
        3:  867:        if (( getCost(choice2) - (getCost(state->hand[currentPlayer][choice1]) ) ) > 2)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  868:        {
    #####:  869:            return -1;
        -:  870:        }
        -:  871:
        3:  872:        gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  873:
        -:  874:        //discard card from hand
        3:  875:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  876:
        -:  877:        //trash a card from hand
       12:  878:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  879:        {
        9:  880:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  881:            {
    #####:  882:                discardCard(i, currentPlayer, state, 1);//added flag 1
call    0 never executed
    #####:  883:                break;
        -:  884:            }
        -:  885:        }
        -:  886:
        -:  887:
        3:  888:        return 0;
        -:  889:
        -:  890:    case smithy:
        -:  891:        //+3 Cards
    #####:  892:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  893:        {
    #####:  894:            drawCard(currentPlayer, state);
call    0 never executed
        -:  895:        }
        -:  896:
        -:  897:        //discard card from hand
    #####:  898:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  899:        return 0;
        -:  900:
        -:  901:    case village:
        -:  902:        //+1 Card
    #####:  903:        drawCard(currentPlayer, state);
call    0 never executed
        -:  904:
        -:  905:        //+2 Actions
    #####:  906:        state->numActions = state->numActions + 2;
        -:  907:
        -:  908:        //discard played card from hand
    #####:  909:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  910:        return 0;
        -:  911:
        -:  912:    case baron:
        1:  913:        state->numBuys++;//Increase buys by 1!
        1:  914:        if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  915:            int p = 0;//Iterator for hand!
        1:  916:            int card_not_discarded = 1;//Flag for discard set!
        4:  917:            while(card_not_discarded) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  918:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  919:                    state->coins += 4;//Add 4 coins to the amount of coins
        1:  920:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  921:                    state->discardCount[currentPlayer]++;
        2:  922:                    for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  923:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  924:                    }
        1:  925:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  926:                    state->handCount[currentPlayer]--;
        1:  927:                    card_not_discarded = 0;//Exit the loop
        -:  928:                }
        1:  929:                else if (p > state->handCount[currentPlayer]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  930:                    if(DEBUG) {
        -:  931:                        printf("No estate cards in your hand, invalid choice\n");
        -:  932:                        printf("Must gain an estate if there are any\n");
        -:  933:                    }
    #####:  934:                    if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  935:                        gainCard(estate, state, 0, currentPlayer);
call    0 never executed
        -:  936:
    #####:  937:                        state->supplyCount[estate]--;//Decrement estates
    #####:  938:                        if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:                            isGameOver(state);
call    0 never executed
        -:  940:                        }
        -:  941:                    }
    #####:  942:                    card_not_discarded = 0;//Exit the loop
        -:  943:                }
        -:  944:
        -:  945:                else {
        1:  946:                    p++;//Next card
        -:  947:                }
        -:  948:            }
        -:  949:        }
        -:  950:
        -:  951:        else {
    #####:  952:            if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
        -:  954:
    #####:  955:                state->supplyCount[estate]--;//Decrement Estates
    #####:  956:                if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:                    isGameOver(state);
call    0 never executed
        -:  958:                }
        -:  959:            }
        -:  960:        }
        -:  961:
        -:  962:
        1:  963:        return 0;
        -:  964:
        -:  965:    case great_hall:
        -:  966:        //+1 Card
    #####:  967:        drawCard(currentPlayer, state);
call    0 never executed
        -:  968:
        -:  969:        //+1 Actions
    #####:  970:        state->numActions++;
        -:  971:
        -:  972:        //discard card from hand
    #####:  973:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  974:        return 0;
        -:  975:
        -:  976:    case minion:
        -:  977:        //+1 action
        1:  978:        state->numActions++;
        -:  979:
        -:  980:        //discard card from hand
        1:  981:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  982:
        1:  983:		if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  984:        {
        1:  985:            *bonus += 2;
        -:  986:        }
    #####:  987:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  988:        {
        -:  989:            //discard hand
    #####:  990:            while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  991:            {
    #####:  992:                discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  993:            }
        -:  994:
        -:  995:            //draw 4
    #####:  996:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  997:            {
    #####:  998:                drawCard(currentPlayer, state);
call    0 never executed
        -:  999:            }
        -: 1000:
        -: 1001:            //other players discard hand and redraw if hand size > 4
    #####: 1002:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:            {
    #####: 1004:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1005:                {
    #####: 1006:                    if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1007:                    {
        -: 1008:                        //discard hand
    #####: 1009:                        while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1010:                        {
    #####: 1011:                            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1012:                        }
        -: 1013:
        -: 1014:                        //draw 4
    #####: 1015:                        for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1016:                        {
    #####: 1017:                            drawCard(i, state);
call    0 never executed
        -: 1018:                        }
        -: 1019:                    }
        -: 1020:                }
        -: 1021:            }
        -: 1022:
        -: 1023:        }
        1: 1024:        return 0;
        -: 1025:
        -: 1026:    case steward:
        1: 1027:        if (choice1 == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1028:        {
        -: 1029:            //+2 cards
    #####: 1030:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:        }
        1: 1033:        else if (choice1 == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1034:        {
        -: 1035:            //+2 coins
        1: 1036:            *bonus += 2;
        -: 1037:        }
        -: 1038:        else
        -: 1039:        {
        -: 1040:            //trash 2 cards in hand
    #####: 1041:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:        }
        -: 1044:
        -: 1045:        //discard card from hand
        1: 1046:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1047:        return 0;
        -: 1048:
        -: 1049:    case tribute:
        -: 1050:
        9: 1051:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1052:            if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1053:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:                state->deckCount[nextPlayer]--;
        -: 1055:            }
    #####: 1056:            else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1057:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1058:                state->discardCount[nextPlayer]--;
        -: 1059:            }
        -: 1060:            else {
        -: 1061:                //No Card to Reveal
        -: 1062:                if (DEBUG) {
        -: 1063:                    printf("No cards to reveal\n");
        -: 1064:                }
        -: 1065:            }
        -: 1066:        }
        -: 1067:
        -: 1068:        else {
        9: 1069:            if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1070:                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1071:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1072:                    state->deckCount[nextPlayer]++;
    #####: 1073:                    state->discard[nextPlayer][i] = -1;
    #####: 1074:                    state->discardCount[nextPlayer]--;
        -: 1075:                }
        -: 1076:
    #####: 1077:                shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1078:            }
        9: 1079:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        9: 1080:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        9: 1081:            state->deckCount[nextPlayer]--;
        9: 1082:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        9: 1083:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        9: 1084:            state->deckCount[nextPlayer]--;
        -: 1085:        }
        -: 1086:		//If we have a duplicate card, just drop one
        9: 1087:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1088:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1089:            state->playedCardCount++;
    #####: 1090:            tributeRevealedCards[1] = -1;
        -: 1091:        }
        -: 1092:
       27: 1093:        for (i = 0; i < 2; i ++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1094:			//Treasure card revealed
       18: 1095:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
branch  2 taken 91% (fallthrough)
branch  3 taken 9%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        8: 1096:                *bonus += 2;
        -: 1097:            }
        -: 1098:			//Victory card revealed, gain 2 cards
       10: 1099:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        7: 1100:                drawCard(currentPlayer, state);
call    0 returned 100%
        7: 1101:                drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1102:            }
        -: 1103:			// Actions
        3: 1104:            else if(tributeRevealedCards[i] >= adventurer && tributeRevealedCards[i] <= treasure_map){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 1105:                state->numActions = state->numActions + 2;
        -: 1106:            }
        -: 1107:        }
        -: 1108:
        9: 1109:        return 0;
        -: 1110:
        -: 1111:    case ambassador:
        2: 1112:        j = 0;		//used to check if player has enough cards to discard
        -: 1113:
        2: 1114:        if (choice2 > 2 || choice2 < 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1115:        {
    #####: 1116:            return -1;
        -: 1117:        }
        -: 1118:
        2: 1119:        if (choice1 == handPos)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1120:        {
    #####: 1121:            return -1;
        -: 1122:        }
        -: 1123:
        9: 1124:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1125:        {
        7: 1126:            if (i != handPos && state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 60% (fallthrough)
branch  5 taken 40%
        -: 1127:            {
        3: 1128:                j++;
        -: 1129:            }
        -: 1130:        }
        2: 1131:        if (j < choice2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1132:        {
    #####: 1133:            return -1;
        -: 1134:        }
        -: 1135:
        -: 1136:        if (DEBUG)
        -: 1137:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1138:
        -: 1139:        //increase supply count for choosen card by amount being discarded
        2: 1140:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1141:
        -: 1142:        //each other player gains a copy of revealed card
        6: 1143:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1144:        {
        4: 1145:            if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1146:            {
        2: 1147:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 returned 100%
        -: 1148:            }
        -: 1149:        }
        -: 1150:
        -: 1151:        //discard played card from hand
        2: 1152:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1153:
        -: 1154:        //trash copies of cards returned to supply
        5: 1155:        for (j = 0; j < choice2; j++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -: 1156:        {
        3: 1157:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1158:            {
        3: 1159:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1160:                {
        3: 1161:                    discardCard(i, currentPlayer, state, 1);
call    0 returned 100%
        3: 1162:                    break;
        -: 1163:                }
        -: 1164:            }
        -: 1165:        }
        -: 1166:
        2: 1167:        return 0;
        -: 1168:
        -: 1169:    case cutpurse:
        -: 1170:
    #####: 1171:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1172:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1173:        {
    #####: 1174:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1175:            {
    #####: 1176:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1177:                {
    #####: 1178:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1179:                    {
    #####: 1180:                        discardCard(j, i, state, 0);
call    0 never executed
    #####: 1181:                        break;
        -: 1182:                    }
    #####: 1183:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1184:                    {
    #####: 1185:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1186:                        {
        -: 1187:                            if (DEBUG)
        -: 1188:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1189:                        }
    #####: 1190:                        break;
        -: 1191:                    }
        -: 1192:                }
        -: 1193:
        -: 1194:            }
        -: 1195:
        -: 1196:        }
        -: 1197:
        -: 1198:        //discard played card from hand
    #####: 1199:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1200:
    #####: 1201:        return 0;
        -: 1202:
        -: 1203:
        -: 1204:    case embargo:
        -: 1205:        //+2 Coins
        1: 1206:        *bonus += 2;
        -: 1207:
        -: 1208:        //see if selected pile is in play
        1: 1209:        if ( state->supplyCount[choice1] == -1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1210:        {
    #####: 1211:            return -1;
        -: 1212:        }
        -: 1213:
        -: 1214:        //add embargo token to selected supply pile
        1: 1215:        state->embargoTokens[choice1]++;
        -: 1216:
        -: 1217:        //trash card
        1: 1218:        discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        1: 1219:        return 0;
        -: 1220:
        -: 1221:    case outpost:
        -: 1222:        //set outpost flag
    #####: 1223:        state->outpostPlayed++;
        -: 1224:
        -: 1225:        //discard card
    #####: 1226:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1227:        return 0;
        -: 1228:
        -: 1229:    case salvager:
        -: 1230:        //+1 buy
        1: 1231:        state->numBuys++;
        -: 1232:
        1: 1233:        if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1234:        {
        -: 1235:            //gain coins equal to trashed card
        1: 1236:			*bonus += getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1237:            //trash card
        1: 1238:            discardCard(choice1, currentPlayer, state, 1);
call    0 returned 100%
        -: 1239:        }
        -: 1240:
        -: 1241:        //discard card
        1: 1242:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1243:        return 0;
        -: 1244:
        -: 1245:    case sea_hag:
    #####: 1246:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1247:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1248:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1249:                state->deckCount[i]--;
    #####: 1250:                state->discardCount[i]++;
    #####: 1251:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1252:            }
        -: 1253:        }
    #####: 1254:        return 0;
        -: 1255:
        -: 1256:    case treasure_map:
        -: 1257:        //search hand for another treasure_map
    #####: 1258:        index = -1;
    #####: 1259:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1260:        {
    #####: 1261:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1262:            {
    #####: 1263:                index = i;
    #####: 1264:                break;
        -: 1265:            }
        -: 1266:        }
    #####: 1267:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1268:        {
        -: 1269:            //trash both treasure cards
    #####: 1270:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1271:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1272:
        -: 1273:            //gain 4 Gold cards
    #####: 1274:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1275:            {
    #####: 1276:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1277:            }
        -: 1278:
        -: 1279:            //return success
    #####: 1280:            return 1;
        -: 1281:        }
        -: 1282:
        -: 1283:        //no second treasure_map found in hand
    #####: 1284:        return -1;
        -: 1285:    }
        -: 1286:
    #####: 1287:    return -1;
        -: 1288:}
        -: 1289:
function discardCard called 15 returned 100% blocks executed 90%
       15: 1290:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1291:{
        -: 1292:	//if card is not trashed, added to Played pile
       15: 1293:	if (trashFlag < 1)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1294:	{
        -: 1295:		//add card to played pile
        9: 1296:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        9: 1297:		state->playedCardCount++;
        -: 1298:	}
        -: 1299:	else {
        6: 1300:		state->supplyCount[handPos]--;
        -: 1301:	}
        -: 1302:	//state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1303:
        -: 1304:	//set played card to -1
       15: 1305:	state->hand[currentPlayer][handPos] = -1;
        -: 1306:
        -: 1307:	//remove card from player's hand
       15: 1308:	if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1309:	{
        -: 1310:		//reduce number of cards in hand
        3: 1311:		state->handCount[currentPlayer]--;
        -: 1312:	}
       12: 1313:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1314:	{
        -: 1315:		//reduce number of cards in hand
    #####: 1316:		state->handCount[currentPlayer]--;
        -: 1317:	}
        -: 1318:	else
        -: 1319:	{
        -: 1320:		//replace discarded card with last card in hand
       12: 1321:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1322:		//set last card to -1
       12: 1323:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1324:		//reduce number of cards in hand
       12: 1325:		state->handCount[currentPlayer]--;
        -: 1326:	}
        -: 1327:
        -: 1328:
       15: 1329:	return 0;
        -: 1330:}
        -: 1331:
function gainCard called 7 returned 100% blocks executed 90%
        7: 1332:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1333:{
        -: 1334:    //Note: supplyPos is enum of choosen card
        -: 1335:
        -: 1336:    //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1337:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        -: 1338:    {
        1: 1339:        return -1;
        -: 1340:    }
        -: 1341:
        -: 1342:    //added card for [whoseTurn] current player:
        -: 1343:    // toFlag = 0 : add to discard
        -: 1344:    // toFlag = 1 : add to deck
        -: 1345:    // toFlag = 2 : add to hand
        -: 1346:
        6: 1347:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1348:    {
    #####: 1349:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1350:        state->deckCount[player]++;
        -: 1351:    }
        6: 1352:    else if (toFlag == 2)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1353:    {
        1: 1354:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1355:        state->handCount[player]++;
        -: 1356:    }
        -: 1357:    else
        -: 1358:    {
        5: 1359:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        5: 1360:        state->discardCount[player]++;
        -: 1361:
        -: 1362:    }
        -: 1363:
        -: 1364:    //decrease number in supply pile
        6: 1365:    state->supplyCount[supplyPos]--;
        -: 1366:
        6: 1367:    return 0;
        -: 1368:}
        -: 1369:
function updateCoins called 23 returned 100% blocks executed 82%
       23: 1370:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1371:{
        -: 1372:    int i;
        -: 1373:
        -: 1374:    //reset coin count
       23: 1375:    state->coins = 0;
        -: 1376:
        -: 1377:    //add coins for each Treasure card in player's hand
      138: 1378:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1379:    {
      115: 1380:        if (state->hand[player][i] == copper)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
        -: 1381:        {
       88: 1382:            state->coins += 1;
        -: 1383:        }
       27: 1384:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1385:        {
    #####: 1386:            state->coins += 2;
        -: 1387:        }
       27: 1388:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1389:        {
    #####: 1390:            state->coins += 3;
        -: 1391:        }
        -: 1392:    }
        -: 1393:
        -: 1394:    //add bonus
       23: 1395:    state->coins += bonus;
        -: 1396:
       23: 1397:    return 0;
        -: 1398:}
        -: 1399:
        -: 1400:
        -: 1401://end of dominion.c
